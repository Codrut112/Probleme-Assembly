     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,fopen,gets,fprintf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import fopen msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import gets msvcrt.dll
    11                                  import fprintf msvcrt.dll
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000000 <res 00000064>              s resb 100
    15 00000064 256300                      print_format db "%c",0
    16 00000067 7700                        mod_acces db "w",0
    17 00000069 737472696E672E7478-         nume_fisier db "string.txt",0
    17 00000072 7400               
    18 00000074 <res 00000004>              descriptor resd 1
    19                                  
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23 00000000 68[67000000]                    push dword mod_acces
    24 00000005 68[69000000]                    push dword nume_fisier
    25 0000000A FF15[00000000]                  call [fopen]
    26 00000010 83C408                          add esp,4*2
    27 00000013 83F800                          cmp eax,0
    28 00000016 746A                            je final
    29 00000018 A3[74000000]                    mov [descriptor],eax
    30                                          
    31 0000001D 68[00000000]                    push dword s
    32 00000022 FF15[00000000]                  call [gets]
    33 00000028 83C404                          add esp,4
    34                                          
    35 0000002B BE[00000000]                    mov esi,s
    36                                          
    37                                          repeta:
    38                                          
    39 00000030 803E00                          cmp byte[esi],0
    40 00000033 7422                            je gata
    41                                          
    42 00000035 803E41                          cmp byte[esi],'A'
    43 00000038 721A                            jb urmatorul
    44                                          
    45 0000003A 803E5A                          cmp byte[esi],'Z'
    46 0000003D 7715                            ja urmatorul
    47                                          
    48 0000003F 56                              push dword esi
    49 00000040 68[64000000]                    push dword print_format
    50 00000045 FF35[74000000]                  push dword [descriptor]
    51 0000004B FF15[00000000]                  call [fprintf]
    52 00000051 83C40C                          add esp,4*3
    53                                          urmatorul:
    54 00000054 46                              inc esi
    55 00000055 EBD9                            jmp repeta
    56                                          gata:
    57 00000057 4E                              dec esi
    58                                          repeta_2:
    59 00000058 803E61                          cmp byte[esi],'a'
    60 0000005B 72F7                            jb urmatorul
    61                                          
    62 0000005D 803E7A                          cmp byte[esi],'z'
    63 00000060 7715                            ja urmatorul2
    64                                          
    65 00000062 56                              push dword esi
    66 00000063 68[64000000]                    push dword print_format
    67 00000068 FF35[74000000]                  push dword [descriptor]
    68 0000006E FF15[00000000]                  call [fprintf]
    69 00000074 83C40C                          add esp,4*3
    70                                          
    71                                          
    72                                          urmatorul2:
    73 00000077 81FE[00000000]                  cmp esi,s
    74 0000007D 7403                            je gata2
    75 0000007F 4E                              dec esi
    76                                          
    77 00000080 EBD6                            jmp repeta_2
    78                                          gata2:
    79                                          final:
    80                                          
    81                                          
    82                                          
    83 00000082 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    84 00000084 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
