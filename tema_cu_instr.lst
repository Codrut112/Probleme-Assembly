     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; Se da un sir de dublucuvinte. Sa se obtina sirul format din octetii inferiori ai cuvintelor superioare din elementele sirului de dublucuvinte care sunt palindrom in scrierea in baza 10.
    12                                  ;s DD 12345678h, 1A2C3C4Dh, 98FCDC76h
    13                                  ;d DB 2Ch, FCh.
    14                                  segment data use32 class=data
    15 00000000 785634124D3C2C1A76-         s dd 12345678h, 1A2C3C4Dh, 98FCDC76h
    15 00000009 DCFC98             
    16                                      ls equ ($-s)/4
    17 0000000C 00<rept>                    d times ls db 0
    18                                      
    19                                  
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23 00000000 BE[00000000]                mov esi,s
    24 00000005 BF[0C000000]                mov edi,d
    25 0000000A B903000000                  mov ecx,ls;ecx=ls
    26 0000000F E348                        jecxz final
    27                                      repeta:
    28 00000011 83C602                        add esi,2;esi=esi+2
    29 00000014 AC                            lodsb;al=octetul inferior din cuvantul superior
    30 00000015 83EE01                        sub esi,1
    31 00000018 660FB6C0                      movzx ax,al
    32 0000001C B30A                          mov bl,10;bl=10
    33 0000001E 6683F80A                      cmp ax,10
    34 00000022 722A                          jb palindrom
    35 00000024 7300                          jae continua
    36                                        continua:
    37 00000026 6683F864                      cmp ax,100
    38 0000002A 7202                          jb compara
    39 0000002C 7308                          jae mai_mare_ca_100
    40                                        compara:
    41 0000002E F6F3                          div bl;al=cifra zecimala,ah=cifra unitara
    42 00000030 38E0                          cmp al,ah
    43 00000032 741A                          je palindrom
    44 00000034 751E                          jne myendif
    45                                        mai_mare_ca_100:
    46 00000036 B264                          mov dl,100
    47 00000038 F6F3                          div bl;ah=cifra unitara
    48 0000003A 88E3                          mov bl,ah;bl=cifra unitara
    49 0000003C AC                            lodsb;al=octetul inferior din cuvantul superior
    50 0000003D 83EE01                        sub esi,1
    51 00000040 660FB6C0                      movzx ax,al
    52 00000044 F6F2                          div dl;al=cifra sutelor
    53 00000046 38D8                          cmp al,bl
    54 00000048 7404                          je palindrom
    55 0000004A 7508                          jne myendif
    56 0000004C EB06                          jmp myendif
    57                                        palindrom:
    58 0000004E A4                            movsb
    59 0000004F 83EE01                        sub esi,1
    60 00000052 EB00                          jmp myendif
    61                                        myendif:
    62 00000054 83C602                        add esi,2
    63 00000057 E2B8                          loop repeta
    64                                        final:
    65                                      
    66                                          
    67                                      
    68                                          ; exit(0)
    69 00000059 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    70 0000005B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
