     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,scanf,gets,printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                   import scanf     msvcrt.dll                     ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import gets msvcrt.dll
    11                                  import printf msvcrt.dll 
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000000 <res 00000004>              n resd 1
    15 00000004 256400                      format_citire db "%d",0
    16 00000007 <res 00000064>              s resb 100
    17 0000006B 257300                      format_print db "%s",0
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22 00000000 68[00000000]                    push dword n
    23 00000005 68[04000000]                    push dword format_citire
    24 0000000A FF15[00000000]                  call [scanf]
    25                                          
    26 00000010 83C408                          add esp,4*2
    27 00000013 B801000000                      mov eax,1
    28 00000018 0105[00000000]                  add dword[n],eax
    29                                          repeta:
    30 0000001E 833D[00000000]00                cmp dword[n],0
    31 00000025 7416                            je gata
    32 00000027 68[07000000]                    push dword s 
    33 0000002C FF15[00000000]                  call [gets]
    34 00000032 83C404                          add esp,4
    35                                          
    36                                          
    37                                          
    38                                      
    39 00000035 FF0D[00000000]                  dec dword[n]
    40                                          
    41                                          
    42                                          
    43 0000003B EBE1                            jmp repeta
    44                                          gata:
    45                                          
    46                                          
    47                                          
    48                                          
    49                                          
    50                                          
    51                                          
    52 0000003D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    53 0000003F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
