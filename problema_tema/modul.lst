     1                                  bits 32      
     2                                  segment data use32 
     3 00000000 00                       stare db 0                   
     4                                  segment code use32 public code
     5                                  global stocare
     6                                  stocare:  
     7                                  ;seteam sirul destinatie si sirul sursa
     8 00000000 8B742408                mov esi,[esp+8]
     9 00000004 8B7C2404                mov edi,[esp+4]   
    10                                  
    11                                  ;stocarea efectiva
    12                                  repeta:
    13                                  
    14                                  ;conditie de oprire
    15 00000008 803E00                  cmp byte[esi],0
    16 0000000B 7459                    je final
    17                                  
    18                                  ;daca intalnim caracterul spatiu inseamna ca avem un numar complet
    19 0000000D 803E20                  cmp byte[esi],' '
    20 00000010 7440                    je adauga_sir 
    21                                  
    22                                  ;daca intalnim caracterul "-" inseamna ca avem un un numar negativ
    23 00000012 803E2D                  cmp byte[esi],'-'
    24 00000015 7431                    je seteaza_negativ
    25                                  
    26                                  ;punem cifra in dl
    27 00000017 8A16                    mov dl,byte[esi]
    28                                  
    29 00000019 803D[00000000]01        cmp byte[stare],1
    30 00000020 7402                    je negativ
    31 00000022 7512                    jne pozitiv
    32                                  
    33                                  ;actualizam numarul (negativ)
    34                                  negativ:
    35 00000024 0FB6DA                  movzx ebx,dl
    36 00000027 01DB                    add ebx,ebx;ebx=ebx*2
    37 00000029 89D9                    mov ecx,ebx;ecx=ebx*2
    38 0000002B 01DB                    add ebx,ebx;ebx=ebx*4
    39 0000002D 01DB                    add ebx,ebx;ebx=ebx*8
    40 0000002F 01CB                    add ebx,ecx;ebx=ebx*10
    41 00000031 29C3                    sub ebx,eax
    42 00000033 46                      inc esi 
    43 00000034 EBD2                    jmp repeta
    44                                  
    45                                  ;actualizam numarul (pozitiv)
    46                                  pozitiv:
    47 00000036 0FB6C2                  movzx eax,dl
    48 00000039 01DB                    add ebx,ebx;ebx=ebx*2
    49 0000003B 89D9                    mov ecx,ebx;ecx=ebx*2
    50 0000003D 01DB                    add ebx,ebx;ebx=ebx*4
    51 0000003F 01DB                    add ebx,ebx;ebx=ebx*8
    52 00000041 01CB                    add ebx,ecx;ebx=ebx*10
    53 00000043 01C3                    add ebx,eax
    54 00000045 46                      inc esi
    55 00000046 EBC0                    jmp repeta
    56                                  
    57                                   
    58                                  ;setam numarul ca fiind negativ
    59                                  seteaza_negativ:
    60 00000048 C605[00000000]01        mov byte[stare],1
    61 0000004F 46                      inc esi
    62 00000050 EBB6                    jmp repeta
    63                                  
    64                                  ;adaugam numarul in sir
    65                                  adauga_sir:
    66 00000052 891F                    mov dword[edi],ebx
    67 00000054 BB00000000              mov ebx,0
    68 00000059 83C704                  add edi,4
    69 0000005C 46                      inc esi
    70 0000005D C605[00000000]00        mov byte[stare],0
    71 00000064 EBA2                    jmp repeta
    72                                  final:
    73 00000066 C3                      ret
