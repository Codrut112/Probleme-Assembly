     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,scanf, gets,printf              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import scanf msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import gets msvcrt.dll
    11                                  import printf msvcrt.dll
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14                                      
    15 00000000 <res 00000064>              sursa resb 100
    16 00000064 <res 00000064>              destinatie resb 100
    17 000000C8 <res 00000064>              inv resb 100
    18 0000012C 25732000                    format_print db "%s ",0
    19                                      
    20                                  
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                      
    25                                      
    26 00000000 68[00000000]                push dword sursa
    27                                      
    28 00000005 FF15[00000000]              call [gets]
    29 0000000B 83C408                      add esp,4*2
    30                                      
    31 0000000E BE[00000000]                mov esi,sursa
    32 00000013 BF[64000000]                mov edi,destinatie
    33                                      
    34                                      repeta:
    35                                      
    36 00000018 803E00                      cmp byte[esi],0
    37 0000001B 743F                        je final_repeta
    38                                      
    39 0000001D 803E20                      cmp byte[esi],' '
    40 00000020 7502                        jne stocheaza_caracter
    41 00000022 7403                        je inverseaza_cuvant
    42                                      
    43                                      stocheaza_caracter:
    44 00000024 A4                          movsb 
    45 00000025 EBF1                        jmp repeta
    46                                      
    47                                      inverseaza_cuvant:
    48                                      
    49 00000027 83EF01                      sub edi,1
    50 0000002A BB[C8000000]                mov ebx,inv
    51                                      
    52                                      repeta_inversare:
    53                                      
    54 0000002F 81FF[63000000]              cmp edi,destinatie-1
    55 00000035 7408                        je gata_inversare
    56                                       
    57 00000037 8A07                        mov al,byte[edi]
    58 00000039 8803                        mov byte[ebx],al
    59 0000003B 43                          inc ebx
    60 0000003C 4F                          dec edi
    61 0000003D EBF0                        jmp repeta_inversare    
    62                                      
    63                                      gata_inversare:
    64                                      
    65 0000003F 68[C8000000]                push dword inv
    66 00000044 68[2C010000]                push dword format_print
    67 00000049 FF15[00000000]              call [printf]
    68 0000004F 83C408                      add esp,4*2
    69                                      
    70 00000052 BF[64000000]                mov edi,destinatie
    71 00000057 83C601                      add esi,1
    72 0000005A EBBC                        jmp repeta
    73                                      
    74                                      final_repeta:
    75 0000005C 83EF01                      sub edi,1
    76 0000005F BB[C8000000]                mov ebx,inv
    77                                      repeta_inversare2:
    78                                      
    79 00000064 81FF[63000000]              cmp edi,destinatie-1
    80 0000006A 7408                        je gata_inversare2
    81                                       
    82 0000006C 8A07                        mov al,byte[edi]
    83 0000006E 8803                        mov byte[ebx],al
    84 00000070 43                          inc ebx
    85 00000071 4F                          dec edi
    86 00000072 EBF0                        jmp repeta_inversare2 
    87                                      
    88                                      gata_inversare2:
    89 00000074 68[C8000000]                push dword inv
    90 00000079 68[2C010000]                push dword format_print
    91 0000007E FF15[00000000]              call [printf]
    92 00000084 83C408                      add esp,4*2
    93                                      
    94                                      
    95                                      
    96                                     
    97                                      
    98                                      
    99                                      
   100                                      
   101                                      
   102                                          
   103 00000087 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   104 00000089 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
