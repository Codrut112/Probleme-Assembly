     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,scanf,printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import scanf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    10                                  import printf msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000000 <res 00000004>              n resd 1
    15 00000004 <res 00000004>              a resd 1
    16 00000008 00000000                    suma_par dd 0
    17 0000000C 00000000                    suma_impar dd 0
    18 00000010 00000000                    dif dd 0
    19 00000014 256400                      format_citire db "%d",0
    20 00000017 6E756D6172756C2064-         mesaj db "numarul de elemente:",0
    20 00000020 6520656C656D656E74-
    20 00000029 653A00             
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25 00000000 68[17000000]                    push dword mesaj
    26 00000005 FF15[00000000]                  call [printf]
    27 0000000B 83C404                          add esp,4
    28                                          
    29 0000000E 68[00000000]                    push dword n
    30 00000013 68[14000000]                    push dword format_citire
    31 00000018 FF15[00000000]                  call [scanf]
    32 0000001E 83C408                          add esp,4*2
    33                                          
    34                                          repeta:
    35                                          
    36 00000021 832D[00000000]01                sub dword[n],1
    37                                          
    38 00000028 68[04000000]                    push dword a
    39 0000002D 68[14000000]                    push dword format_citire
    40 00000032 FF15[00000000]                  call [scanf]
    41 00000038 83C408                          add esp,4*2
    42                                          
    43 0000003B A1[04000000]                    mov eax,[a]
    44                                          
    45 00000040 83E001                          and eax,1b
    46                                          
    47 00000043 83F801                          cmp eax,1
    48 00000046 740F                            je impar
    49 00000048 7500                            jne par
    50                                          
    51                                  
    52                                          par: 
    53 0000004A A1[04000000]                    mov eax,[a]
    54 0000004F 0105[08000000]                  add   [suma_par],eax     
    55 00000055 EB0B                            jmp salt
    56                                          
    57                                          impar:
    58 00000057 A1[04000000]                    mov eax,[a]
    59 0000005C 0105[0C000000]                  add [suma_impar],eax
    60                                          salt:
    61 00000062 833D[00000000]00                cmp dword[n],0
    62 00000069 77B6                            ja repeta
    63                                          
    64                                          
    65                                          
    66                                          
    67                                          ; exit(0)
    68 0000006B 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    69 0000006D FF15[00000000]                  call    [exit]       ; call exit to terminate the program
