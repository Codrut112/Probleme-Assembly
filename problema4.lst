     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,gets,printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import gets msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 <res 00000064>              s resb 100
    14 00000064 00000000                    nr_litere dd 0
    15 00000068 25642000                    format_print db "%d ",0
    16                                  
    17                                  ; our code starts here
    18                                  segment code use32 class=code
    19                                      start:
    20                                          
    21 00000000 68[00000000]                    push dword s
    22 00000005 FF15[00000000]                  call [gets]
    23 0000000B 83C404                          add esp,4
    24                                          
    25 0000000E BF[00000000]                    mov edi,s
    26                                          
    27                                          repeta:
    28 00000013 803F00                          cmp byte[edi],0
    29 00000016 7432                            je gata
    30                                          
    31 00000018 803F20                          cmp byte[edi]," "
    32 0000001B 7402                            je afiseaza_numar
    33 0000001D 7521                            jne incrementeaza_numar
    34                                          
    35                                          afiseaza_numar:
    36 0000001F FF35[64000000]                  push dword [nr_litere]
    37 00000025 68[68000000]                    push dword format_print
    38 0000002A FF15[00000000]                  call [printf]
    39 00000030 83C408                          add esp,4*2
    40 00000033 47                              inc edi
    41 00000034 C705[64000000]0000-             mov dword[nr_litere],0
    41 0000003C 0000               
    42 0000003E EBD3                            jmp repeta
    43                                          
    44                                          incrementeaza_numar:
    45 00000040 8305[64000000]01                add dword[nr_litere],1
    46 00000047 47                              inc edi
    47 00000048 EBC9                            jmp repeta
    48                                          
    49                                          gata:
    50                                          
    51 0000004A FF35[64000000]                  push dword [nr_litere]
    52 00000050 68[68000000]                    push dword format_print
    53 00000055 FF15[00000000]                  call [printf]
    54 0000005B 83C408                          add esp,4*2
    55                                          
    56                                          
    57                                          
    58                                      
    59                                          
    60 0000005E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    61 00000060 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
