     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 FFFE0A0B0405                s db -1,-2,10,11,4,5;r=1,-2
    15                                      ls equ $-s
    16 00000006 <res 00000006>              r resb ls
    17                                  
    18                                  ; se da un sir de bytes 
    19                                  ;sa se stearga un sir valorile negative
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23 00000000 B906000000                      mov ecx,ls
    24 00000005 BE00000000                      mov esi,0
    25 0000000A BF00000000                      mov edi,0
    26                                          repeta:
    27 0000000F 8A86[00000000]                      mov al,byte[s+esi]
    28 00000015 3C00                                cmp al,0
    29 00000017 7C02                                JL negativ
    30 00000019 7D0B                                JGE pozitiv
    31                                              negativ:
    32 0000001B 8887[06000000]                        mov byte[r+edi],al
    33 00000021 83C701                                add edi,1
    34 00000024 EB03                                  jmp myendif
    35                                              pozitiv:
    36 00000026 83C601                                add esi,1
    37                                              myendif:
    38 00000029 E2E4                            loop repeta
    39                                      
    40                                          ; exit(0)
    41 0000002B 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    42 0000002D FF15[00000000]                  call    [exit]       ; call exit to terminate the program
